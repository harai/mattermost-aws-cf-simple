from troposphere import GetAtt, StackName, Sub, imagebuilder

from mattermost.common import util


def component():
  return imagebuilder.Component(
      'Component',
      Data=Sub(util.get_file('mattermost/ami/resources/component.yaml')),
      Name=StackName,
      Platform='Linux',
      Version=util.get_file('mattermost/common/AUTO_VERSION'))


def image_recipe(base_ami, component, mattermost_version):
  return imagebuilder.ImageRecipe(
      'ImageRecipe',
      BlockDeviceMappings=[
          imagebuilder.InstanceBlockDeviceMapping(
              DeviceName='/dev/xvda',
              Ebs=imagebuilder.EbsInstanceBlockDeviceSpecification(
                  VolumeSize=8, VolumeType='gp3')),
      ],
      Components=[
          imagebuilder.ComponentConfiguration(
              ComponentArn=util.arn_of(component),
              Parameters=[
                  imagebuilder.ComponentParameter(
                      Name='Version',
                      Value=[util.read_param(mattermost_version)])
              ]),
      ],
      Name=StackName,
      ParentImage=util.read_param(base_ami),
      Version=util.get_file('mattermost/common/AUTO_VERSION'))


def infrastructure_configuration(
    *, builder_instance_profile, key_pair, log_bucket, notification_topic,
    my_vpc, subnet, route_internet, subnet_route_table_association,
    ssh_security_group):
  version = util.get_file('mattermost/common/AUTO_VERSION')
  return imagebuilder.InfrastructureConfiguration(
      'InfrastructureConfiguration',
      DependsOn=[
          route_internet.name,
          subnet_route_table_association.name,
      ],
      Description=Sub('Generated by ${AWS::StackName}'),
      InstanceProfileName=util.name_of(builder_instance_profile),
      InstanceTypes=['t3a.micro'],
      KeyPair=util.read_param(key_pair),
      Logging=imagebuilder.Logging(
          S3Logs=imagebuilder.S3Logs(
              S3BucketName=util.name_of(log_bucket),
              S3KeyPrefix=f'{version}/')),
      Name=StackName,
      SecurityGroupIds=[
          GetAtt(my_vpc, 'DefaultSecurityGroup'),
          util.name_of(ssh_security_group),
      ],
      SnsTopicArn=util.arn_of(notification_topic),
      SubnetId=util.name_of(subnet))


def image_pipeline(image_recipe, infrastructure_configuration):
  return imagebuilder.ImagePipeline(
      'ImagePipeline',
      InfrastructureConfigurationArn=util.arn_of(infrastructure_configuration),
      ImageRecipeArn=util.arn_of(image_recipe),
      Name=StackName)
